{
package filterexpr

import (
    "fmt"
    "strings"
    "regexp"

    pjson "github.com/pinpt/go-common/v10/json"
)

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

type Node struct {
    Key string
    Value string
    RegExp bool
    re *regexp.Regexp
}

var _ Filter = (*Node)(nil)

func (n *Node) String() string {
    if n.RegExp {
        return fmt.Sprintf("Node[%s=~%s]", n.Key, n.Value)
    }
    return fmt.Sprintf("Node[%s=%s]", n.Key, n.Value)
}

func toString(val interface{}) string {
    if sval, ok := val.(string); ok {
        return sval
    }
    if sval, ok := val.(fmt.Stringer); ok {
        return sval.String()
    }
    return pjson.Stringify(val)
}

func (n *Node) Test(kv map[string]interface{}) bool {
    if val, ok := kv[n.Key]; ok {
        sval := toString(val)
        if n.RegExp {
            return n.re.MatchString(sval)
        }
        return n.Value == sval
    }
    if strings.Contains(n.Key, ".") {
        val, _ := pjson.DottedFind(n.Key, kv)
        if val == nil {
            return false
        }
        sval := toString(val)
        if n.RegExp {
            return n.re.MatchString(sval)
        }
        return n.Value == sval
    }
    return n.Value == ""
}

type Expression struct {
    Left *Node
    Conjunction string
    Right *Expression
}

var _ Filter = (*Expression)(nil)

func (e *Expression) String() string {
    return fmt.Sprintf("Expression[%s,%s,%s]", e.Left, e.Conjunction, e.Right)
}

func (n *Expression) Test(kv map[string]interface{}) bool {
    if n.Right == nil {
        return n.Left.Test(kv)
    }
    if n.Conjunction == "OR" {
            return n.Left.Test(kv) || n.Right.Test(kv)
    }
    return n.Left.Test(kv) && n.Right.Test(kv)
}

type ExpressionGroup struct {
    Left []*Expression
    Conjunction string
    Right []*Expression
}

var _ Filter = (*ExpressionGroup)(nil)

func (g *ExpressionGroup) String() string {
    if g.Conjunction == "" {
       return fmt.Sprintf("ExpressionGroup[%s]", g.Left)
    }
    return fmt.Sprintf("ExpressionGroup[%s,%s,%s]", g.Left, g.Conjunction, g.Right)
}

func (n *ExpressionGroup) Test(kv map[string]interface{}) bool {
    if len(n.Right) == 0 {
        for _, e := range n.Left {
            if !e.Test(kv) {
                return false
            }
        }
        return true
    }
    left := true
    for _, e := range n.Left {
        if !e.Test(kv) {
            left = false
            break
        }
    }
    right := true
    for _, e := range n.Right {
        if !e.Test(kv) {
            right = false
            break
        }
    }
    if n.Conjunction == "OR" {
        return left || right
    }
    return left && right
}

type ExpressionList struct{
    groups []*ExpressionGroup
}

var _ Filter = (*ExpressionList)(nil)

func (l *ExpressionList) Test(kv map[string]interface{}) bool {
    var isOr bool
    for _, n := range l.groups {
        isOr = n.Conjunction == "OR"
        ok := n.Test(kv)
        if !ok {
            if isOr {
                continue
            }
            return false
        } else {
            if isOr {
                return true
            }
        }
    }
    return !isOr
}

func (l *ExpressionList) String() string {
    return fmt.Sprintf("ExpressionList[%s]", l.groups)
}

}

Object ← _ val:ExpressionList EOF {
    return val, nil
}

Value ← val:( String ) _ {
    return val, nil
}

OrCondition ← "OR"
AndCondition ← "AND"

Condition ← OrCondition / AndCondition

ExpressionList ← _ vals:( ExpressionGroup ( _ Condition ExpressionGroup )* ) {
    valsSl := toIfaceSlice(vals)
    res := &ExpressionList{
        groups: make([]*ExpressionGroup, 0),
    }
    left := valsSl[0].([]*Expression)
    initial := &ExpressionGroup{
        Left: left,
    }
    res.groups = append(res.groups,initial)
    right := valsSl[1].([]interface{})
    for _, e := range right {
        conjunction := string(e.([]interface{})[1].([]byte))
        if initial.Conjunction == "" {
            initial.Conjunction = conjunction
        }
        nodeRight := e.([]interface{})[2].([]*Expression)
        if initial.Right == nil {
            initial.Right = nodeRight
        } else {
            initial = &ExpressionGroup{
                Left: nodeRight,
                Conjunction: conjunction,
            }
            res.groups = append(res.groups,initial)
        }
    }
    return res, nil
}

ExpressionGroup ← _ vals:( _ LeftParen? _ Expression _ RightParen? _ )+ {
    valsSl := toIfaceSlice(vals)
    res := make([]*Expression, 0)
    //fmt.Println("expression group", len(valsSl))
    for _, val := range valsSl {
        //fmt.Println("exp group", i, "val", val)
        res = append(res, toIfaceSlice(val)[3].(*Expression))
    }
    return res, nil
}

Separator ← ':'

NodeVal ← val:( String / Number / Bool / Regexp ) _ {
    return val, nil
}

Node ← _ vals:( _ Label _ Separator _ NodeVal _ ) {
    var res Node
    valsSl := toIfaceSlice(vals)
    res.Key = valsSl[1].(string)
    if re, ok := valsSl[5].(*regexp.Regexp); ok {
        res.re = re
        res.RegExp = true
    } else {
        res.Value = toString(valsSl[5])
    }
    return &res, nil
}

Expression ← _ vals:( Node ( _ Condition _ Node )* ) {
    valsSl := toIfaceSlice(vals)
    left := valsSl[0].(*Node)
    var right *Expression
    var current *Expression
    var conjunction string
    //fmt.Println("len", len(valsSl))
    if len(valsSl) > 1 {
        grouping := toIfaceSlice(valsSl[1])
        for _, group := range grouping {
            igroup := toIfaceSlice(group)
            //fmt.Println(i, "group", igroup)
            conjunction = string(igroup[1].([]byte))
            //fmt.Println(i, conjunction)
            iright := igroup[3].(*Node)
            //fmt.Println(i, iright)
            newexp := &Expression{iright, conjunction, nil}
            if right == nil {
                right = newexp
                current = newexp
            } else {
                current.Right = newexp
                current = newexp
            }
        }
    }
    return &Expression{left, conjunction, right}, nil
}

Label ← ( [a-zA-Z0-9\\._\\-]+ ) {
    return string(c.text), nil
}

String ← '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
}

LeftParen ← "("

RightParen ← ")"

EscapedChar ← [\x00-\x1f"\\]

EscapeSequence ← SingleCharEscape / UnicodeEscape

SingleCharEscape ← ["\\/bfnrt]

UnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit ← [0-9]

NonZeroDecimalDigit ← [1-9]

Number ← '-'? Integer ( '.' DecimalDigit+ )? Exponent? {
    return strconv.ParseFloat(string(c.text), 64)
}

Integer ← '0' / NonZeroDecimalDigit DecimalDigit*

Exponent ← 'e'i [+-]? DecimalDigit+

Bool ← "true" { return true, nil } / "false" { return false, nil }

HexDigit ← [0-9a-f]i

Regexp ← '/' [A-Za-z0-9^$-._\\(\\)\\?\\+{} ]+ '/' {
    return regexp.Compile(string(c.text[1: len(c.text)-1]))
}

_ "whitespace" ← [ \t\r\n]*

EOF ← !.